#!/usr/bin/env bash
# ===================================================================
# ChezMoi Bootstrap Script - Tool Installation
# ===================================================================
# This script runs once when Che# Platform-specific clipboard tools (Linux/WSL specific)
if [[ "$PLATFORM" == "linux" ]]; then
    echo "üêß Installing Linux-specific tools..."
    install_fallback_tool "xclip" "xclip" || echo "‚ö†Ô∏è  xclip installation failed, continuing..."
    install_fallback_tool "wl-clipboard" "wl-clipboard" "wl-copy" || echo "‚ö†Ô∏è  wl-clipboard installation failed, continuing..."
fi

# Install build tools for potential compilation needss first applied
# It installs Pixi package manager and synchronizes all CLI tools
# defined in pixi.toml, plus fallback installations for tools
# not available in conda-forge
# 
# Execution: Automatically run by ChezMoi on first 'chezmoi apply'
# Template: This is a .tmpl file, so it can use ChezMoi variables

set -e  # Exit on any error

# Add debug output to track the execution flow
set -x  # Enable debug mode to print each command before execution

echo "üöÄ Setting up development tools..."

# ===================================================================
# Pixi Installation
# ===================================================================
# Install Pixi if it's not already available
# Pixi manages most of our CLI tools via conda-forge ecosystem
if ! command -v pixi >/dev/null; then
  echo "üì¶ Installing Pixi package manager..."
  curl -sSf https://pixi.sh/install.sh | bash
  echo "‚úÖ Pixi installed successfully"
else
  echo "‚úÖ Pixi already installed"
fi

# ===================================================================
# ChezMoi Binary Setup
# ===================================================================
# Ensure chezmoi is accessible in PATH by creating symlink
echo "üîó Setting up ChezMoi binary access..."

# Create .local/bin directory if it doesn't exist
mkdir -p "$HOME/.local/bin"

# Path to chezmoi binary in source directory
# Use CHEZMOI_SOURCE_DIR if available (set by chezmoi during execution)
# Otherwise fall back to the current script's parent directory
if [[ -n "${CHEZMOI_SOURCE_DIR:-}" ]]; then
    CHEZMOI_BINARY="${CHEZMOI_SOURCE_DIR}/bin/chezmoi"
else
    # Get the source directory from the script's location
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    CHEZMOI_SOURCE_DIR="$(dirname "$SCRIPT_DIR")"
    CHEZMOI_BINARY="${CHEZMOI_SOURCE_DIR}/bin/chezmoi"
fi

# Check if binary exists
if [[ -f "$CHEZMOI_BINARY" ]]; then
    # Make sure the binary is executable
    chmod +x "$CHEZMOI_BINARY"
    
    # Create or update symlink
    if [[ -L "$HOME/.local/bin/chezmoi" ]]; then
        # Remove existing symlink
        rm "$HOME/.local/bin/chezmoi"
    elif [[ -f "$HOME/.local/bin/chezmoi" ]]; then
        # Backup existing file
        mv "$HOME/.local/bin/chezmoi" "$HOME/.local/bin/chezmoi.backup.$(date +%s)"
        echo "‚ö†Ô∏è  Backed up existing chezmoi binary"
    fi
    
    # Create new symlink
    ln -sf "$CHEZMOI_BINARY" "$HOME/.local/bin/chezmoi"
    echo "‚úÖ ChezMoi binary linked to PATH"
    
    # Verify it works
    if command -v chezmoi >/dev/null 2>&1; then
        echo "‚úÖ ChezMoi is now accessible via PATH"
    else
        echo "‚ùå ChezMoi setup failed - still not in PATH"
    fi
else
    echo "‚ùå ChezMoi binary not found at $CHEZMOI_BINARY"
fi

# ===================================================================
# Environment Setup
# ===================================================================
# Ensure Pixi is available in current session
export PATH="$HOME/.pixi/bin:$PATH"

# ===================================================================
# Package Synchronization
# ===================================================================
# Synchronize packages using Pixi while respecting existing local configurations
# Priority order:
# 1. Existing PIXI_PROJECT_MANIFEST (from user/other tools)
# 2. Local pixi.local.toml (ChezMoi-specific overrides)
# 3. Local pixi.toml (standard Pixi configuration)
# 4. Default Pixi behavior (global/fallback)
# Navigate to ChezMoi source directory and sync packages using profiles
echo "üìã Synchronizing packages from pixi.toml..."
# Use the source directory we already determined
cd "${CHEZMOI_SOURCE_DIR}"

# Use a subshell to isolate PIXI_PROJECT_MANIFEST changes
(
    # Check for local pixi configurations in ChezMoi directory
    if [[ -f "$CHEZMOI_SOURCE_DIR/pixi.local.toml" ]]; then
        echo "üìã Found ChezMoi-specific pixi configuration: pixi.local.toml"
        PIXI_PROJECT_MANIFEST="$CHEZMOI_SOURCE_DIR/pixi.local.toml" pixi install --environment dev
    elif [[ -f "$CHEZMOI_SOURCE_DIR/pixi.toml" ]]; then
        echo "üìã Found ChezMoi pixi configuration: pixi.toml"
        PIXI_PROJECT_MANIFEST="$CHEZMOI_SOURCE_DIR/pixi.toml" pixi install --environment dev
    else
        echo "üìã No ChezMoi pixi configuration found. Installing via default pixi behavior."
        # Temporarily unset PIXI_PROJECT_MANIFEST to use local/default behavior
        unset PIXI_PROJECT_MANIFEST
        pixi install --environment dev
    fi
)

echo "‚úÖ Pixi packages synchronized"

# ===================================================================
# Fallback Installations
# ===================================================================
# Install tools not available in conda-forge or having platform issues
# These are essential for our ZSH configuration and daily workflow

echo "üîß Installing fallback tools via system package manager..."

# Detect the environment
PLATFORM="unknown"
if [[ "$(uname)" == "Linux" ]]; then
    if grep -qi microsoft /proc/version 2>/dev/null; then
        PLATFORM="wsl2"
        echo "ü™ü Detected WSL2 environment"
    else
        PLATFORM="linux"
        echo "üêß Detected Linux environment"
    fi
else
    echo "‚ùå Unsupported platform: $(uname)"
    exit 1
fi

# Detect package manager
if command -v apt-get >/dev/null; then
    PACKAGE_MANAGER="apt"
elif command -v yum >/dev/null; then
    PACKAGE_MANAGER="yum"
elif command -v dnf >/dev/null; then
    PACKAGE_MANAGER="dnf"
else
    echo "‚ö†Ô∏è  No supported package manager found, skipping fallback installations"
    PACKAGE_MANAGER="none"
fi

# Function to install tools with better error handling and permission fixes
install_fallback_tool() {
    local tool="$1"
    local apt_package="$2"
    local binary_check="${3:-$tool}"
    
    # Check if sudo will require a password
    SUDO_CMD="sudo"
    if ! sudo -n true 2>/dev/null; then
        if [[ -t 1 ]]; then
            echo "üîë Sudo requires a password. Please enter it now."
        else
            echo "‚ö†Ô∏è  Sudo requires a password, but this is not an interactive terminal. Skipping sudo commands."
            SUDO_CMD="sudo -n" # Will fail immediately if password is required
        fi
    fi

    if command -v "$binary_check" >/dev/null 2>&1; then
        echo "‚úÖ $tool already available"
        # Ensure existing tool has execute permissions
        tool_path=$(which "$binary_check" 2>/dev/null)
        if [[ -n "$tool_path" && -f "$tool_path" && ! -x "$tool_path" ]]; then
            echo "üîß Fixing permissions for $tool..."
            chmod +x "$tool_path" 2>/dev/null || echo "‚ö†Ô∏è  Cannot fix permissions for $tool"
        fi
        return 0
    fi
    
    echo "üì¶ Installing $tool ($apt_package)..."

    # Special handling for eza on Debian/Ubuntu
    if [[ "$tool" == "eza" && "$PACKAGE_MANAGER" == "apt" ]]; then
        echo "üîß Setting up repository for eza..."
        $SUDO_CMD apt-get update -qq >/dev/null 2>&1 || true
        $SUDO_CMD apt-get install -y gpg >/dev/null 2>&1
        $SUDO_CMD mkdir -p /etc/apt/keyrings
        wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | $SUDO_CMD gpg --dearmor -o /etc/apt/keyrings/gierens.gpg
        echo "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | $SUDO_CMD tee /etc/apt/sources.list.d/gierens.list >/dev/null
        $SUDO_CMD apt-get update -qq >/dev/null 2>&1
    fi

    case "$PACKAGE_MANAGER" in
        "apt")
            $SUDO_CMD apt-get update -qq >/dev/null 2>&1 || true
            if $SUDO_CMD apt-get install -y "$apt_package" >/dev/null 2>&1; then
                echo "‚úÖ Successfully installed $tool"
                # Fix permissions for newly installed tool
                tool_path=$(which "$binary_check" 2>/dev/null)
                if [[ -n "$tool_path" && -f "$tool_path" ]]; then
                    chmod +x "$tool_path" 2>/dev/null || true
                fi
            else
                echo "‚ùå Failed to install $tool via apt"
                return 1
            fi
            ;;
        "dnf")
            if $SUDO_CMD dnf install -y "$apt_package" >/dev/null 2>&1; then
                echo "‚úÖ Successfully installed $tool"
                # Fix permissions for newly installed tool
                tool_path=$(which "$binary_check" 2>/dev/null)
                if [[ -n "$tool_path" && -f "$tool_path" ]]; then
                    chmod +x "$tool_path" 2>/dev/null || true
                fi
            else
                echo "‚ùå Failed to install $tool via dnf"
                return 1
            fi
            ;;
        "yum")
            if $SUDO_CMD yum install -y "$apt_package" >/dev/null 2>&1; then
                echo "‚úÖ Successfully installed $tool"
                # Fix permissions for newly installed tool
                tool_path=$(which "$binary_check" 2>/dev/null)
                if [[ -n "$tool_path" && -f "$tool_path" ]]; then
                    chmod +x "$tool_path" 2>/dev/null || true
                fi
            else
                echo "‚ùå Failed to install $tool via yum"
                return 1
            fi
            ;;
        *)
            echo "‚ö†Ô∏è  Cannot install $tool - no supported package manager"
            return 1
            ;;
    esac
}

# Essential tools for ZSH configuration that commonly have conda-forge issues
echo "üîß Installing critical tools NOT managed by Pixi..."

# NOTE: These tools are already managed by Pixi (defined in pixi.toml):
# - fzf, bat, ripgrep (rg), fd-find, eza, btop, jq, starship, direnv, etc.
# Only install tools here that are NOT available in conda-forge or have platform-specific issues

# Essential system tools that are typically not in conda-forge
install_fallback_tool "git" "git" || echo "‚ö†Ô∏è  git installation failed, continuing..."
install_fallback_tool "curl" "curl" || echo "‚ö†Ô∏è  curl installation failed, continuing..."
install_fallback_tool "wget" "wget" || echo "‚ö†Ô∏è  wget installation failed, continuing..."
install_fallback_tool "unzip" "unzip" || echo "‚ö†Ô∏è  unzip installation failed, continuing..."

# Platform-specific clipboard tools (Linux/WSL specific)
if [[ "$PLATFORM" == "linux" ]]; then
    echo "ÔøΩ Installing Linux-specific tools..."
    install_fallback_tool "xclip" "xclip" || echo "‚ö†Ô∏è  xclip installation failed, continuing..."
    install_fallback_tool "wl-clipboard" "wl-clipboard" "wl-copy" || echo "‚ö†Ô∏è  wl-clipboard installation failed, continuing..."
fi

# Install build tools for potential compilation needs
if [[ "$PACKAGE_MANAGER" == "apt" ]]; then
    install_fallback_tool "build-essential" "build-essential" "gcc" || echo "‚ö†Ô∏è  build-essential installation failed, continuing..."
fi

echo "‚úÖ Fallback tools installation complete"

# ===================================================================
# POST-INSTALLATION VERIFICATION & PERMISSIONS
# ===================================================================
echo "üîç Verifying critical tools and fixing permissions..."

# Update tool list to focus on tools that should be available after Pixi + fallback installs
CRITICAL_TOOLS=("git" "curl" "chezmoi")
PIXI_MANAGED_TOOLS=("fzf" "rg" "fd" "bat" "jq" "eza" "starship")
MISSING_TOOLS=()

# Check system tools (git, curl, etc.)
for tool in "${CRITICAL_TOOLS[@]}"; do
    if command -v "$tool" >/dev/null 2>&1; then
        echo "‚úÖ $tool: available"
        
        # Ensure the tool has execute permissions
        tool_path=$(which "$tool" 2>/dev/null)
        if [[ -n "$tool_path" && -f "$tool_path" ]]; then
            if [[ ! -x "$tool_path" ]]; then
                echo "üîß Fixing permissions for $tool..."
                chmod +x "$tool_path" 2>/dev/null || {
                    echo "‚ö†Ô∏è  Cannot fix permissions for $tool (may need sudo)"
                }
            fi
        fi
    else
        echo "‚ùå $tool: missing"
        MISSING_TOOLS+=("$tool")
    fi
done

# Check Pixi-managed tools (only when in Pixi environment)
if [[ -n "$PIXI_PROJECT_ROOT" ]]; then
    echo "üì¶ Checking Pixi-managed tools..."
    for tool in "${PIXI_MANAGED_TOOLS[@]}"; do
        if command -v "$tool" >/dev/null 2>&1; then
            echo "‚úÖ $tool: available (Pixi)"
        else
            echo "‚ùå $tool: missing from Pixi environment"
        fi
    done
else
    echo "‚ö†Ô∏è  Not in Pixi environment - Pixi tools may not be available until direnv activates"
fi

# Fix permissions for any user binaries in ~/.local/bin
if [[ -d "$HOME/.local/bin" ]]; then
    echo "üîß Ensuring all user binaries have execute permissions..."
    find "$HOME/.local/bin" -type f -name "*" -exec chmod +x {} \; 2>/dev/null || true
fi

# Fix permissions for Pixi-managed tools
if [[ -d "$HOME/.pixi/bin" ]]; then
    echo "üîß Ensuring Pixi-managed tools have execute permissions..."
    find "$HOME/.pixi/bin" -type f -name "*" -exec chmod +x {} \; 2>/dev/null || true
fi

if [[ ${#MISSING_TOOLS[@]} -gt 0 ]]; then
    echo ""
    echo "‚ö†Ô∏è  Some critical system tools are missing: ${MISSING_TOOLS[*]}"
    echo "üí° Install them manually with: sudo apt install ${MISSING_TOOLS[*]}"
    echo ""
    echo "üì¶ Note: Modern CLI tools (fzf, bat, rg, eza, etc.) are managed by Pixi"
    echo "   They are available when the Pixi environment is active (via direnv)"
    echo "   Run 'direnv allow' in the ChezMoi directory to enable automatic activation"
fi

# ===================================================================
# Set Zsh as default shell
# ===================================================================
echo "üêö Setting Zsh as the default shell..."
if [[ "$SHELL" != *"/zsh"* ]]; then
    if command -v zsh >/dev/null 2>&1; then
        ZSH_PATH=$(which zsh)
        echo "Changing default shell to Zsh ($ZSH_PATH)..."
        # The chsh command may require a password
        if chsh -s "$ZSH_PATH"; then
            echo "‚úÖ Default shell changed to Zsh."
            echo "   Please log out and back in for the change to take effect."
        else
            echo "‚ö†Ô∏è  Failed to change default shell. Please run 'chsh -s $ZSH_PATH' manually."
        fi
    else
        echo "‚ö†Ô∏è  Zsh is not installed. Cannot set as default shell."
    fi
else
    echo "‚úÖ Zsh is already the default shell."
fi

echo "üéâ Tool setup complete!"

# Disable debug mode at the end of the script
set +x  # Disable debug mode
